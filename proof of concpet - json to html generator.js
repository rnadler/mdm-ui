(function(ResMed, $) {

  ResMed.ECO.Pages.setPageFunction('flowgen_multi_program_debug_proof_of_concept', {
//- Variables ------------------------------------------------------------------------------------------------------------------------------
//Constants
    BOOLEAN:  'boolean',
    DATE:     'date',
    EMAIL:    'email',
    NUMBER:   'number',
    SELECT:   'select',
    TEXT:     'text',

//Variables
    $dataDiv: '', //inititalized in init
    pbOut: '',    //printbuffer, buffers content before printing into UI

//- PAGE INIT ------------------------------------------------------------------------------------------------------------------------------
    init: function() {
      this.$dataDiv = $("#sample_renderer");
      this.startAjaxRequest();

    },//end init

//- EVENT HANDLERS  ------------------------------------------------------------------------------------------------------------------------
    startAjaxRequest: function() {
      this.processAjaxRequest(this.sampleResponse); //Use mock data
    },

    processAjaxRequest: function(response) {
      this.removeEventHandlers();
      this.renderOutPut(response);
      this.addEventHandlers();
    },

    removeEventHandlers: function() {
      $("#sample_renderer input") .unbind();
      $("#sample_renderer select").unbind();
    },

    addEventHandlers: function() {
      $("#sample_renderer input") .bind( "change", this.onChangeInput );
      $("#sample_renderer select").bind( "change", this.onChangeInput );

      $('#sample_renderer .datepicker').datepicker({
        changeMonth : true,
        changeYear  : true,
        yearRange   : '1900:1+nn'
      });
    },

    /**
     * Full of testing methods!
     * @param src
     */
    onChangeInput: function(src) {
      try{
        var id= src.target.id;
        var name= src.target.name;
        var value= src.target.value;

        console.log("EVENT FIRED by: " + id);
        console.log("Values: " + name + " value: " + value)
        if(src.target.attributes.reloadOnChange){
          console.log("RELOAD TRIGGERD");
        }

      }catch(ex) {
        if(!this.hasBeenNotified) { //gets set for each element once.
          alert("Successfully triggered onChange. Sadly this browser does console output. This message will not be repeated.\n" +
              "EXCEPTION: \n" + ex.description);
          this.debugHasBeenNotified = true;
        }
      }
    },


//- UI FUNCTIONS  --------------------------------------------------------------------------------------------------------------------------
    renderOutPut: function(uiJson) {
      this.$dataDiv.html(""); //clear

      for(var sectionName in uiJson) {
        var section = uiJson[sectionName];
        this.processSection(sectionName, section);
      }
    },

    /**
     * Generates:
     * <div class="section" id="section_#section name#">
     *   <hr>
     *   <h2>SectionHandling</h2>      //Only printed if group has a label
     *   <div class="row">
     *     <--  -->                 //this is generated by processElement
     *   </div>
     * </div>
     * @param sectionName
     * @param group
     */
    processSection: function(sectionName, section) {
      this.pbOut += "<div class='section' id='section_" + sectionName + "'>";
      if(section.label) {
        this.pbOut += "<hr />";
        this.pbOut += "<h2><label>" + section.label + "</label></h2>";
      }

      this.pbOut += "  <div class='row'>";
      for(var groupName in section.groups) {
        var group = section.groups[groupName];
        var groupID = sectionName + "_" + groupName;
        this.processGroup(groupName, group, groupID);
      }

      this.pbOut += "  </div>";//row
      this.pbOut += "</div>";//section
      this.printFromBuffer();
    },

    /**
     * Generates:
     * <div class="group" id="group#groups name#">
     *   <h3>GroupHeading</h3>      //Only printed if group has a label
     *   <div class="row">
     *     <--  -->                 //this is generated by processElement
     *   </div>
     * </div>
     * @param groupName
     * @param group
     */
    processGroup: function(groupName, group, groupID) {
      this.pbOut += "<div class='group' id='group_" + groupName + "'>";
      if(group.label) {
        this.pbOut += "<h3><label>" + group.label + "</label></h3>";
      }
      this.pbOut += "  <div class='row'>";

      for(var elementName in group.elements) {
        var element = group.elements[elementName];
        var elementID = groupID + "_" + elementName;
        this.processElement(elementName, element, elementID);
      }

      this.pbOut += "  </div>";//row
      this.pbOut += "</div>";//group
    },

    /**
     * Generates:
     * <div class="grid_X">
     *   <p>element title</p>
     *   <p><strong>elem value</strong></p>      //Optional
     *   </div>
     * </div>
     * @param elementName
     * @param element
     */
    processElement: function(elementName, element, elementID) {
      //this.pbOut += "<div class='col-md-2'>";
      this.pbOut += "<div class='grid_3'>";
      this.pbOut += "<label for='" + elementID + "' >";
      this.pbOut += element.label;
      this.pbOut += "</label>";

      if(!element.editable) {
        this.processStaticElement(element);
      }
      else{
        this.processEditableElement(elementName,  element, elementID);
      }

      this.pbOut += "</div>";
    },

    processStaticElement: function(element) {
      this.pbOut += "<strong>" + element.formattedValue + "</strong>";
    },



    processEditableElement: function(elementName, element, elementID) {
      var format = element.editable.format;
      if(element.editable.before)
        this.pbOut += element.editable.before;


      if(format == this.BOOLEAN)
        this.processEditableBoolean(elementName, element, elementID);
      else if(format == this.DATE)
        this.processEditableDate(elementName, element, elementID);
      else if(format == this.EMAIL)
        this.processEditableEmail(elementName, element, elementID);
      else if(format == this.NUMBER)
        this.processEditableNumber(elementName, element, elementID);
      else if(format == this.SELECT)
        this.processEditableSelect(elementName, element, elementID);
      else //Treat all unknowns as text
        this.processEditableText(elementName, element, elementID);

      if(element.editable.after)
        this.pbOut += element.editable.after;
    },

    processEditableBoolean: function(elementName, element, elementID) {
      var editable = element.editable;
      this.pbOut += "<input type='checkbox' value='true' ";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " name='" + elementName + "'";
      if(this.isTrue(editable.value))
        this.pbOut += " checked";
      this.processConstraints(element);
      this.pbOut += " />";
    },

    processEditableDate: function(elementName, element, elementID) {
      var editable = element.editable;
      var constraints = editable.constraints;

      this.pbOut += "<input type='text'";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " class='datepicker hasDatepicker'";
      this.pbOut += " name='"  + elementName + "'";
      this.pbOut += " value='" + editable.value + "'";
      this.processConstraints(element);
      this.pbOut += " />";
    },

    processEditableEmail: function(elementName, element, elementID) {
      var editable = element.editable;
      this.pbOut += "<input type='email'";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " name='"  + elementName + "'";
      this.pbOut += " value='" + editable.value + "'";
      this.processConstraints(element);
      this.pbOut += " />";
    },

    processEditableNumber: function(elementName, element, elementID) {
      var editable = element.editable;

      this.pbOut += "<input type='number'";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " name='"  + elementName + "'";
      this.pbOut += " value='" + editable.value + "'";
      this.processConstraints(element);
      this.pbOut += " />";
    },

    processEditableSelect: function(elementName, element, elementID) {
      var editable = element.editable;
      this.pbOut += "<select";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " name='"  + elementName + "'";
      this.pbOut += " value='" + editable.value + "'";
      this.processConstraints(element);
      this.pbOut += " >";

      this.processSelectOptions(element);
      this.pbOut += "</select>";
    },

    processSelectOptions: function(element) {
      var options = element.editable.options;

      for(var value in options) {
        this.pbOut += "<option ";
        this.pbOut += " value='" + value + "'";
        if(element.value == value);
          this.pbOut += " selected";
        this.pbOut += ">";
        this.pbOut += options[value];
        this.pbOut += "</option>";
      }
    },


    processEditableText: function(elementName, element, elementID) {
      var editable = element.editable;
      this.pbOut += "<input type='text'";
      this.pbOut += " id='" + elementID + "'";
      this.pbOut += " name='"  + elementName + "'";
      this.pbOut += " value='" + editable.value + "'";
      this.processConstraints(element);
      this.pbOut += " />";
    },

    processConstraints: function(element) {
      var editable    = element.editable;
      var constraints = editable.constraints;
      if(constraints) {
        //Numbers
        if(constraints.min)
          this.pbOut += " min='"  + constraints.min + "'";
        if(constraints.max)
          this.pbOut += " max='"  + constraints.max + "'";
        if(constraints.step)
          this.pbOut += " step='"  + constraints.step + "'";
        if(constraints.reloadOnChange && this.isTrue(constraints.reloadOnChange))
          this.pbOut += " reloadOnChange='true'";
        //Text
        if(constraints.maxLength)
          this.pbOut += " maxLength='"  + constraints.maxLength + "'";
        if(constraints.minLength)
          this.pbOut += " max='"  + constraints.minLength + "'";
      }
    },

//- END Render -----------------------------------------------------------------------------------------------------------------------------
    printFromBuffer: function() {
      this.appendToView(this.pbOut);
      this.pbOut = '';
    },

    appendToView: function(html) {
      this.$dataDiv.append(html);
    },

    isTrue: function(boolean) {
      if(!boolean)
        return false;
      if(boolean === true)
        return true;
      if(boolean === 1)
        return true;
      if (typeof boolean === 'string' || boolean instanceof String) {
        boolean = boolean.toUpperCase();
        if(boolean === "TRUE" || boolean === "ON" || boolean === "")
          return true;
        else
          return false;
      }
    },


//- SAMPLE JSON ----------------------------------------------------------------------------------------------------------------------------
    sampleResponse: {
      "Section1": {
        "label": "SectionComponent 1: Sample SectionComponent with Title",
        "groups": {
          "device": {
            //No Label means we don't add a Heading for this group
            "elements": {
              "device": {
                "label": "Device",
                "formattedValue": "Astral",
              },
              "serial": {
                "label": "Serial Number",
                "formattedValue": "13EA2AD4896",
                "editable": {
                  "value": "13EA2AD4896",
                  "format": "text",
                  "constraints": {"minLength": 12, "maxLength": 12}
                }
              }
            }
          },//device group
        },//groups1
      },//sampleSection1
      "Section2": {
        "label": "SectionComponent 2: Content Demo",
        "groups": {
          "Editables": {
            "label": "Editable Elements",
            "elements": {
              "mode": {
                "label": "Mode",
                "formattedValue": "IPAP",
                "editable": {
                  "value": "IPAP",
                  "format": "select",
                  "constraints": {"reloadOnChange": true},
                  "options": {"cpap": "CPAP", "vpap": "VPAP", "ipap": "IPAP"}
                }
              },
              "pressure": {
                "label": "Pressure",
                "formattedValue": "100%",
                "editable": {
                  "value": "100",
                  "format": "number",
                  "after": "%",
                  "constraints": {"min": "0", "max": "100", "step": 10}
                }
              },
              "DATE": {
                "label": "Date",
                "formattedValue": "21/10/2016",
                "editable": {
                  "value": "21/10/2016",
                  "format": "date",
                }
              },
              "Currency": {
                "label": "Currency",
                "formattedValue": "AUD 195.50",
                "editable": {
                  "value": "200.00",
                  "before": "AUD",
                  "format": "number",
                  "constraints": {"min": 0.00, "max": 200.00, "step": 0.50}
                }
              },
              "Boolean_false": {
                "label": "Boolean False",
                "formattedValue": "OFF",
                "editable": {
                  "value": "false",
                  "format": "boolean",
                }
              },
              "Boolean_true": {
                "label": "Boolean true",
                "formattedValue": "ON",
                "editable": {
                  "value": "true",
                  "format": "boolean",
                }
              },
              "text": {
                "label": "Text",
                "formattedValue": "some basic text",
                "editable": {
                  "value": "some basic text",
                  "format": "text",
                }
              },
              "dropdown": {
                "label": "Dropdown",
                "formattedValue": "Dropdown",
                "editable": {
                  "value": "1",
                  "format": "select",
                  "options": {"o0": "Options 0", "o1": "Options 1", "o2": "Options 2"}
                }
              },
              "email": {
                "label": "E-Mail",
                "formattedValue": "test@test.com",
                "editable": {
                  "value": "test@test.com",
                  "format": "email",
                }
              },
            }//elements
          },//Editables group
          "Fixed": {
            "label": "Static Elements",
            "elements": {
              "mode": {
                "label": "Mode",
                "formattedValue": "IPAP",
              },
              "pressure": {
                "label": "Pressure",
                "formattedValue": "100%",
              },
              "DATE": {
                "label": "Date",
                "formattedValue": "21/10/2016",
              },
              "Currency": {
                "label": "Currency",
                "formattedValue": "AUD 200",
              },
              "Boolean_false": {
                "label": "Boolean False",
                "formattedValue": "OFF",
              },
              "Boolean_true": {
                "label": "Boolean true",
                "formattedValue": "ON",
              },
              "text": {
                "label": "Text",
                "formattedValue": "some basic text",
              },
              "dropdown": {
                "label": "Dropdown",
                "formattedValue": "Dropdown",
              },
              "email": {
                "label": "E-Mail",
                "formattedValue": "test@test.com",
              }
            }//elements
          },//Fixed group
        },//groups
      },//section
      "Section3": {
        "label": "SectionComponent 3: Grouping Demo",
        "groups": {
          "Short1": {
            "label": "Short group with title (following will be a few groups with no title)",
            "elements": {
              "mode": {
                "label": "Mode",
                "formattedValue": "IPAP",
              },
              "ct": {
                "label": "Circuit type",
                "formattedValue": "Single with leak",
              },
              "pi": {
                "label": "Patient Interface",
                "formattedValue": "Mask",
              },
              "mask": {
                "label": "Mask",
                "formattedValue": "Nasal Activa",
              },
              "Patienttype": {
                "label": "Patient Type",
                "formattedValue": "Adult",
              },
            }//elements
          },//Short Groups group
          "Short2": {
            "elements": {
              "trigger": {
                "label": "Trigger",
                "formattedValue": "Very High",
              },
            }//elements
          },//Short Groupss group
          "Short3": {
            "elements": {
              "mode": {
                "label": "Mode",
                "formattedValue": "IPAP",
              },
              "pressure": {
                "label": "Pressure",
                "formattedValue": "100%",
              },
            }//elements
          }//short groups 3
        }//groups
      }//Sample Section2
    }
//- END SAMPLE JSON ------------------------------------------------------------------------------------------------------------------------
  });//End Namespace

}(window.ResMed, window.jQuery));
